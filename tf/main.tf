# add user admin-user
#####################
resource "aws_iam_user" "admin-user" {
  name = "hans"

  tags = {
    Description = "This is the admin user"
  }
}

resource "aws_iam_policy" "admin-user" {
  name        = "Administrators"
  description = "Administrators Policy"

  # # Terraform's "jsonencode" function converts a
  # # Terraform expression result to valid JSON syntax.
  # policy = jsonencode({
  #   Version = "2012-10-17"
  #   Statement = [
  #     {
  #       Action = [
  #         "ec2:Describe*",
  #       ]
  #       Effect   = "Allow"
  #       Resource = "*"
  #     },
  #   ]
  # })
  
  # Heredoc syntax <<EOF ... EOF
  # policy = <<EOF
  #   {
  #     "Version": "2012-10-17",
  #     "Statement": [
  #         {
  #         "Action": "*",
  #         "Effect": "Allow",
  #         "Resource": "*"
  #         }
  #     ]
  #   }
  #   EOF

  policy = file("policies/admin-policy.json")
}

resource "aws_iam_policy_attachment" "hans-admin-access" {
  name       = "PolicyAttachmentHans"
  users      = [aws_iam_user.admin-user.name]
  policy_arn = aws_iam_policy.admin-user.arn
}

# VPC examples
#-------------
# resource "aws_vpc" "production" {
#   cidr_block = "10.0.0.0/16"

#   tags = {
#     Name = "production"
#   }
# }

# resource "aws_vpc" "dev" {
#   cidr_block = "10.10.0.0/16"

#   tags = {
#     Name = "dev"
#   }
# }

# resource "aws_subnet" "workloads" {
#   vpc_id     = aws_vpc.production.id
#   cidr_block = "10.0.1.0/24"

#   tags = {
#     Name = "Main"
#   }
# }

# create a s3 bucket and upload files
# -----------------------------------
resource "aws_s3_bucket" "finance" {
  bucket = "finance-12365469787234"
  tags = {
    Description = "Finance and Payroll"
  }
}

resource "aws_s3_object" "finance-2025" {
  bucket = aws_s3_bucket.finance.id
  key    = "finance-2025.doc"
  source = local.filename

  # The filemd5() function is available in Terraform 0.11.12 and later
  # For Terraform 0.11.11 and earlier, use the md5() function and the file() function:
  # etag = "${md5(file("path/to/file"))}"
  etag = filemd5(local.filename)
}

resource "aws_iam_user" "finance-user" {
  name = "finance-analist"
}

# TODO: does not work yet
# resource "aws_s3_bucket_policy" "finance-policy" {
#   bucket = aws_s3_bucket.finance.id
#   policy = data.aws_iam_policy_document.allow_access_from_another_account.json
# }

data "aws_iam_policy_document" "allow_access_from_another_account" {
  statement {
    principals {
      type        = "AWS"
      identifiers = [aws_iam_user.finance-user.id]
    }

    actions = [
      "s3:Get*",
      "s3:List*",
    ]

    resources = [
      aws_s3_bucket.finance.arn,
      "${aws_s3_bucket.finance.arn}/*",
    ]
  }
}

# datasource
# ----------
data "local_file" "file1" {
  filename = local.filename
}

# # read local file content into file at s3
# resource "aws_s3_object" "shared_zip" {
#   bucket  = "aws-s3-bucket-12365469787234"
#   key     = "file1.txt.coppied"
#   content = data.local_file.file1.content
# }

# variables
# ------------------

resource "local_file" "pet" {
  filename = "${path.module}/docs/pets.txt"
  content  = "${var.content} with id: ${random_pet.my-pet.id}"
}

resource "local_file" "files" {
  filename = "${path.module}/docs/prefix/${each.value}.txt"
  content  = "Hello ${each.value}!"
  for_each = toset(var.prefix)
}

resource "random_pet" "my-pet" {
  prefix    = var.prefix[2]
  separator = var.separator
  length    = var.length
}

output "pet-name" {
  value       = random_pet.my-pet.id
  description = "Record the value of the pet ID generated by the random_pet resource"
}

output "files" {
  value     = local_file.files
  sensitive = true
}